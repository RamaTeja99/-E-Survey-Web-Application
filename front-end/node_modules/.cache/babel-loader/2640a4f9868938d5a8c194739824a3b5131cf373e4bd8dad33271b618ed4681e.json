{"ast":null,"code":"import axios from 'axios';\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\nexport const REGISTER_USER_FAILURE = 'REGISTER_USER_FAILURE';\nexport const LOGIN_USER_SUCCESS = 'LOGIN_USER_SUCCESS';\nexport const LOGIN_USER_FAILURE = 'LOGIN_USER_FAILURE';\nexport const LOGOUT_USER = 'LOGOUT_USER';\nexport const registerUser = (userData, history) => async dispatch => {\n  try {\n    console.log(\"userData1\", userData);\n    // Simulated API call\n    // Replace this with your actual API endpoint\n    const response = await axios.post('http://localhost:8080/form/addUser', userData);\n    dispatch({\n      type: REGISTER_USER_SUCCESS,\n      payload: response.data\n    });\n    history.push('/login'); // Redirect after successful registration\n  } catch (error) {\n    dispatch({\n      type: REGISTER_USER_FAILURE,\n      payload: error.response.data\n    });\n  }\n};\nexport const loginUser = (userData, history) => async dispatch => {\n  try {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    const params = {\n      email: userData.email,\n      password: userData.password\n    };\n    const response = await axios.get('http://localhost:8080/form/getUserForLogin', {\n      params,\n      headers\n    });\n    if (response.status === 200) {\n      dispatch({\n        type: LOGIN_USER_SUCCESS,\n        payload: response.data\n      });\n      alert('Login successful');\n    } else {\n      dispatch({\n        type: LOGIN_USER_FAILURE,\n        payload: response.data.message\n      });\n    }\n    history.push('/dashboard');\n  } catch (error) {\n    dispatch({\n      type: LOGIN_USER_FAILURE,\n      payload: error.response.data\n    });\n    alert('No user found. Please register.');\n    history.push('/register');\n  }\n};\nexport const logoutUser = () => dispatch => {\n  dispatch({\n    type: LOGOUT_USER\n  });\n};","map":{"version":3,"names":["axios","REGISTER_USER_SUCCESS","REGISTER_USER_FAILURE","LOGIN_USER_SUCCESS","LOGIN_USER_FAILURE","LOGOUT_USER","registerUser","userData","history","dispatch","console","log","response","post","type","payload","data","push","error","loginUser","headers","params","email","password","get","status","alert","message","logoutUser"],"sources":["C:/Users/Rama Teja/Dropbox/PC/Desktop/MERN/Project/New/E-SurveyWithPhone/E-SurveyWithPhoneAuth/Survey/E-Survey/front-end/src/actions/authActions.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\r\nexport const REGISTER_USER_FAILURE = 'REGISTER_USER_FAILURE';\r\nexport const LOGIN_USER_SUCCESS = 'LOGIN_USER_SUCCESS';\r\nexport const LOGIN_USER_FAILURE = 'LOGIN_USER_FAILURE';\r\nexport const LOGOUT_USER = 'LOGOUT_USER';\r\n\r\nexport const registerUser = (userData, history) => async (dispatch) => {\r\n  try {\r\n    console.log(\"userData1\",userData)\r\n    // Simulated API call\r\n    // Replace this with your actual API endpoint\r\n    const response = await axios.post('http://localhost:8080/form/addUser', userData);\r\n\r\n    dispatch({\r\n      type: REGISTER_USER_SUCCESS,\r\n      payload: response.data,\r\n    });\r\n\r\n    history.push('/login'); // Redirect after successful registration\r\n  } catch (error) {\r\n    dispatch({\r\n      type: REGISTER_USER_FAILURE,\r\n      payload: error.response.data,\r\n    });\r\n  }\r\n};\r\n\r\nexport const loginUser = (userData, history) => async (dispatch) => {\r\n  try {\r\n    const headers = { 'Content-Type': 'application/json' };\r\n    const params = { email: userData.email, password: userData.password };\r\n\r\n    const response = await axios.get('http://localhost:8080/form/getUserForLogin', {\r\n      params, headers\r\n    });\r\n\r\n    if (response.status === 200) {\r\n      dispatch({\r\n        type: LOGIN_USER_SUCCESS,\r\n        payload: response.data,\r\n      });\r\n      alert('Login successful');\r\n    } else {\r\n      dispatch({\r\n        type: LOGIN_USER_FAILURE,\r\n        payload: response.data.message,\r\n      });\r\n    }\r\n    history.push('/dashboard');\r\n  } catch (error) {\r\n    dispatch({\r\n      type: LOGIN_USER_FAILURE,\r\n      payload: error.response.data,\r\n    });\r\n    alert('No user found. Please register.');\r\n    history.push('/register');\r\n  }\r\n};\r\n\r\nexport const logoutUser = () => (dispatch) => {\r\n  dispatch({ type: LOGOUT_USER });\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,qBAAqB,GAAG,uBAAuB;AAC5D,OAAO,MAAMC,qBAAqB,GAAG,uBAAuB;AAC5D,OAAO,MAAMC,kBAAkB,GAAG,oBAAoB;AACtD,OAAO,MAAMC,kBAAkB,GAAG,oBAAoB;AACtD,OAAO,MAAMC,WAAW,GAAG,aAAa;AAExC,OAAO,MAAMC,YAAY,GAAGA,CAACC,QAAQ,EAAEC,OAAO,KAAK,MAAOC,QAAQ,IAAK;EACrE,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,WAAW,EAACJ,QAAQ,CAAC;IACjC;IACA;IACA,MAAMK,QAAQ,GAAG,MAAMZ,KAAK,CAACa,IAAI,CAAC,oCAAoC,EAAEN,QAAQ,CAAC;IAEjFE,QAAQ,CAAC;MACPK,IAAI,EAAEb,qBAAqB;MAC3Bc,OAAO,EAAEH,QAAQ,CAACI;IACpB,CAAC,CAAC;IAEFR,OAAO,CAACS,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdT,QAAQ,CAAC;MACPK,IAAI,EAAEZ,qBAAqB;MAC3Ba,OAAO,EAAEG,KAAK,CAACN,QAAQ,CAACI;IAC1B,CAAC,CAAC;EACJ;AACF,CAAC;AAED,OAAO,MAAMG,SAAS,GAAGA,CAACZ,QAAQ,EAAEC,OAAO,KAAK,MAAOC,QAAQ,IAAK;EAClE,IAAI;IACF,MAAMW,OAAO,GAAG;MAAE,cAAc,EAAE;IAAmB,CAAC;IACtD,MAAMC,MAAM,GAAG;MAAEC,KAAK,EAAEf,QAAQ,CAACe,KAAK;MAAEC,QAAQ,EAAEhB,QAAQ,CAACgB;IAAS,CAAC;IAErE,MAAMX,QAAQ,GAAG,MAAMZ,KAAK,CAACwB,GAAG,CAAC,4CAA4C,EAAE;MAC7EH,MAAM;MAAED;IACV,CAAC,CAAC;IAEF,IAAIR,QAAQ,CAACa,MAAM,KAAK,GAAG,EAAE;MAC3BhB,QAAQ,CAAC;QACPK,IAAI,EAAEX,kBAAkB;QACxBY,OAAO,EAAEH,QAAQ,CAACI;MACpB,CAAC,CAAC;MACFU,KAAK,CAAC,kBAAkB,CAAC;IAC3B,CAAC,MAAM;MACLjB,QAAQ,CAAC;QACPK,IAAI,EAAEV,kBAAkB;QACxBW,OAAO,EAAEH,QAAQ,CAACI,IAAI,CAACW;MACzB,CAAC,CAAC;IACJ;IACAnB,OAAO,CAACS,IAAI,CAAC,YAAY,CAAC;EAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdT,QAAQ,CAAC;MACPK,IAAI,EAAEV,kBAAkB;MACxBW,OAAO,EAAEG,KAAK,CAACN,QAAQ,CAACI;IAC1B,CAAC,CAAC;IACFU,KAAK,CAAC,iCAAiC,CAAC;IACxClB,OAAO,CAACS,IAAI,CAAC,WAAW,CAAC;EAC3B;AACF,CAAC;AAED,OAAO,MAAMW,UAAU,GAAGA,CAAA,KAAOnB,QAAQ,IAAK;EAC5CA,QAAQ,CAAC;IAAEK,IAAI,EAAET;EAAY,CAAC,CAAC;AACjC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}